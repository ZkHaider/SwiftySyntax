//
//  Swift.Symbols.swift
//  SwiftySyntax
//
//  Created by Haider Khan on 2/1/20.
//  Copyright Â© 2020 zkhaider. All rights reserved.
//

import Foundation

public enum SwiftSymbols: String {
    case `import`           = "import"
    case `typealias`        = "typealias"
    case `struct`           = "struct"
    case `class`            = "class"
    case identifier         = "identifier"
    case `enum`             = "enum"
    case `protocol`         = "protocol"
    case `func`             = "func"
    case dot                = "."
    case get                = "get"
    case set                = "set"
    case `throws`           = "throws"
    case `rethrows`         = "rethrows"
    case dashArrow          = "->"
    case questionMark       = "?"
    case underscore         = "_"
    case indirect           = "indirect"
    case `static`           = "static"
    case final              = "final"
    case `public`           = "public"
    case `private`          = "private"
    case `fileprivate`      = "fileprivate"
    case `open`             = "open"
    case `internal`         = "internal"
    case privateSet         = "private(set)"
    case fileprivateSet     = "fileprivate(set)"
    case internalSet        = "internal(set)"
    case greaterThan        = ">"
    case `associatedtype`   = "associatedtype"
    case `init`             = "init"
    case `deinit`           = "deinit"
    case `extension`        = "extension"
    case `subscript`        = "subscript"
    case prefix             = "prefix"
    case `operator`         = "operator"
    case postfix            = "postfix"
    case infix              = "infix"
    case precedence         = "precedence"
    case precedenceClauseToken1 = "precedence_clause_token1"
    case associativity      = "associativity"
    case left               = "left"
    case right              = "right"
    case none               = "none"
    case `is`               = "is"
    case `as`               = "as"
    case `true`             = "true"
    case `false`            = "false"
    case staticLiteralString = "static_literal_string"
    case number             = "number"
    case `nil`              = "nil"
    case standardType       = "standard_type"
    case array              = "Array"
    case dictionary         = "dictionary"
    case semanticVersion    = "semantic_version"
    case comment            = "comment"
    case program            = "program"
    case statement          = "_statement"
    case loopStatement      = "_loop_statement"
    case forStatement       = "for_statement"
    case whileStatement     = "while_statement"
    case conditionClause    = "_condition_clause"
    case condition          = "_condition"
    case availabilityPlatforms = "_availability_platforms"
    case availabilityCondition = "availability_condition"
    case caseCondition      = "case_condition"
    case optionalBindingCondition = "optional_binding_condition"
    case optionalBinding    = "optional_binding"
    case repeatWhileStatement = "repeat_while_statement"
    case ifStatement        = "if_statement"
    case guardStatement     = "guard_statement"
    case switchStatement    = "switch_statement"
    case caseStatement      = "case_statement"
    case codeBlock          = "_code_block"
    case labeledStatement   = "labeled_statement"
    case breakStatement     = "break_statement"
    case continueStatement  = "continue_statement"
    case returnStatement    = "return_statement"
    case throwStatement     = "throw_statement"
    case deferStatement     = "defer_statement"
    case doStatement        = "do_statement"
    case catchClause        = "catch_clause"
    case buildConfigurationStatement = "build_configuration_statement"
    case buildConfiguration = "_build_configuration"
    case lineControlStatement = "line_control_statement"
    case diagnosticStatement = "diagnostic_statement"
    case declaration        = "_declaration"
    case importDeclaration  = "import_declaration"
    case constantDeclaration = "constant_declaration"
    case patternInitializer = "_pattern_initializer"
    case variableDeclaration = "variable_declaration"
    case variableDeclarationHead = "_variable_declaration_head"
    case variableName       = "_variable_name"
    case getterSetterKeywordBlock = "_getter_setter_keyword_block"
    case getterKeywordClause = "_getter_keyword_clause"
    case setterKeywordClause = "_setter_keyword_clause"
    case typealiasDeclaration = "typealias_declaration"
    case typealiasHead      = "_typealias_head"
    case functionDeclaration = "function_declaration"
    case functionHead       = "_function_head"
    case functionSignature  = "_function_signature"
    case parameterList      = "parameter_list"
    case functionReturnStatement = "_function_return_statement"
    case parameterClause    = "_parameter_clause"
    case singleParameter    = "_single_parameter"
    case enumDeclaration    = "enum_declaration"
    case caseDeclaration    = "case_declaration"
    case modifier           = "modifier"
    case declarationModifier = "_declaration_modifier"
    case accessControlModifier = "_access_control_modifier"
    case genericClause      = "generic_clause"
    case singleGenericParameter = "_single_generic_parameter"
    case structDeclaration  = "struct_declaration"
    case classDeclaration   = "class_declaration"
    case protocolDeclaration = "protocol_declaration"
    case protocolVariableDeclaration = "protocol_variable_declaration"
    case protocolMethodDeclaration = "protocol_method_declaration"
    case protocolInitializerDeclaration = "protocol_initializer_declaration"
    case protocolSubscriptDeclaration = "protocol_subscript_declaration"
    case protocolTypealiasDeclaration = "protocol_typealias_declaration"
    case associatedTypeDeclaration = "associatedtype_declaration"
    case initializerDeclaration = "initializer_declaration"
    case initializerHead    = "_initializer_head"
    case deinitializerDeclaration = "deinitializer_declaration"
    case extensionDeclaration = "extension_declaration"
    case subscriptDeclaration = "subscript_declaration"
    case subscriptHead      = "_subscript_head"
    case subscriptResult    = "_subscript_result"
    case operatorDeclaration = "operation_declaration"
    case precedenceClause   = "precedence_clause"
    case associativityClause = "associativity_clause"
    case pattern            = "_pattern"
    case wildcardPattern    = "wildcard_pattern"
    case valueBindingPattern = "value_binding_pattern"
    case enumCasePattern    = "enum_case_pattern"
    case optionalPattern    = "optional_pattern"
    case isPattern          = "is_pattern"
    case asPattern          = "as_pattern"
    case expression         = "_expression"
    case booleanLiteral     = "boolean_literal"
    case type               = "type"
    case typeDeclarator     = "_type_declarator"
    case tupleType          = "tuple_type"
    case arrayType          = "array_type"
    case arrayTypeFull      = "_array_type_full"
    case arrayTypeShorthand = "_array_type_shorthand"
    case arrayDeclaration   = "array"
    case dictionaryType     = "dictionary_type"
    case dictionaryTypeFull = "_dictionary_type_full"
    case dictionaryTypeShorthand = "_dictionary_type_shorthand"
    case typeAnnotation     = "_type_annotation"
    case typeIdentifier     = "_type_identifier"
    case typeName           = "_type_name"
    case programRepeat1     = "program_repeat1"
    case conditionClauseRepeat1 = "_condition_clause_repeat1"
    case availabilityClauseRepeat1 = "availability_condition_repeat1"
    case optionalBindingConditionRepeat1 = "optional_binding_condition_repeat1"
    case switchStatementRepeat1 = "switch_statement_repeat1"
    case caseStatementRepeat1 = "case_statement_repeat1"
    case doStatementRepeat1 = "do_statement_repeat1"
    case buildConfigurationStatementRepeat1 = "build_configuration_statement_repeat1"
    case importDeclarationRepeat1 = "import_declaration_repeat1"
    case constantDeclarationRepeat1 = "constant_declaration_repeat1"
    case constantDeclarationRepeat2 = "constant_declaration_repeat2"
    case parameterListRepeat1 = "parameter_list_repeat1"
    case parameterClauseRepeat1 = "_parameter_clause_repeat1"
    case enumDeclarationRepeat1 = "enum_declaration_repeat1"
    case genericClauseRepeat1 = "generic_clause_repeat1"
    case structDeclarationRepeat1 = "struct_declaration_repeat1"
    case protocolDeclarationRepeat1 = "protocol_declaration_repeat1"
    case tupleTypeRepeat1   = "tuple_type_repeat1"
    case tupleDeclarationRepeat1 = "_tuple_declaration_repeat1"
    case arrayDeclarationRepeat1 = "_array_declaration_repeat1"
    case dictionaryDeclarationRepeat1 = "_dictionary_declaration_repeat1"
    case boolean            = "boolean"
    case parameterDeclaration = "parameter_declaration"
    case string             = "string"
    case tuple              = "tuple"
    case openCurlyBrace     = "{"
    case comma              = ","
    case closedCurlyBrace   = "}"
    case semicolon          = ":"
    case openBracket        = "["
    case closedBracket      = "]"
    case escape             = "\\"
    case escapeSequence     = "escape_sequence"
    case `null`             = "null"
    case value              = "value"
    case object             = "object"
    case pair               = "pair"
    case stringContent      = "stringContent"
}

extension SwiftSymbols: Symbols {
    
    public static let allValues: [Self] = {
        return Array(Self.allCases)
    }()
    
    public static let symbolMap: [String : SwiftSymbols] = {
        return allValues.reduce(into: [:]) { (map, symbol) in
            map[symbol.rawValue] = symbol
        }
    }()
    
}
